import { useState, useEffect, useCallback } from 'react';
import { useAPI } from './useAPI';

interface Route {
  id: string;
  origin: string;
  destination: string;
  mode: 'air' | 'ocean';
  frequency?: number;
  lastSeen?: string;
}

interface UseRouterAutocompleteOptions {
  minLength?: number;
  debounceMs?: number;
  limit?: number;
}

export function useRouterAutocomplete(options: UseRouterAutocompleteOptions = {}) {
  const { minLength = 2, debounceMs = 300, limit = 10 } = options;
  const [query, setQuery] = useState('');
  const [routes, setRoutes] = useState<Route[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const { get } = useAPI();

  const searchRoutes = useCallback(async (searchQuery: string) => {
    if (searchQuery.length < minLength) {
      setRoutes([]);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const { data, error: apiError } = await get<{ routes: Route[] }>(
        `/api/routes/autocomplete?q=${encodeURIComponent(searchQuery)}&limit=${limit}`
      );

      if (apiError) {
        setError(apiError);
        setRoutes([]);
      } else if (data?.routes) {
        setRoutes(data.routes);
      } else {
        setRoutes([]);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to search routes');
      setRoutes([]);
    } finally {
      setIsLoading(false);
    }
  }, [get, minLength, limit]);

  // Debounced search effect
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      searchRoutes(query);
    }, debounceMs);

    return () => clearTimeout(timeoutId);
  }, [query, searchRoutes, debounceMs]);

  const selectRoute = useCallback((route: Route) => {
    setQuery(`${route.origin} â†’ ${route.destination}`);
    setRoutes([]);
  }, []);

  const clearRoutes = useCallback(() => {
    setRoutes([]);
    setQuery('');
    setError(null);
  }, []);

  return {
    query,
    setQuery,
    routes,
    isLoading,
    error,
    selectRoute,
    clearRoutes,
    searchRoutes,
  };
}
